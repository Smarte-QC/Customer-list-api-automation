{
	"info": {
		"_postman_id": "46461322-4407c0e8-595f-4dda-9e8b-9b84462f70e7",
		"name": "S67-Shashank",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Industry",
			"item": [
				{
					"name": "industry- Valid Data -\"value\": \"51\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e0f65da-72fe-4334-8f5c-bf3d397bbad8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has a valid structure\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"    pm.expect(response).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Status object contains expected properties\", function () {\r",
									"    pm.expect(response.status).to.have.property('statusCode');\r",
									"    pm.expect(response.status).to.have.property('requestId');\r",
									"    pm.expect(response.status).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Data is an array\", function () {\r",
									"    pm.expect(response.data).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "46461322-34864bac-5774-4729-af69-304115355582",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": {\r\n        \"value\": \"51\"\r\n    },\r\n    \"pagination\": {\r\n        \"page_size\": 50,\r\n        \"page_no\": 1\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_Url}}filter/v1/industry",
							"host": [
								"{{base_Url}}filter"
							],
							"path": [
								"v1",
								"industry"
							]
						}
					},
					"response": []
				},
				{
					"name": "industry-  Wrong Data -\"value\": \"51*a\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e0f65da-72fe-4334-8f5c-bf3d397bbad8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has a valid structure\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"    pm.expect(response).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Status object contains expected properties\", function () {\r",
									"    pm.expect(response.status).to.have.property('statusCode');\r",
									"    pm.expect(response.status).to.have.property('requestId');\r",
									"    pm.expect(response.status).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Data is an array\", function () {\r",
									"    pm.expect(response.data).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "46461322-61470761-e92e-4ade-87be-82a2f35a6057",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": {\r\n        \"value\": \"51*a\"\r\n    },\r\n    \"pagination\": {\r\n        \"page_size\": 50,\r\n        \"page_no\": 1\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_Url}}filter/v1/industry",
							"host": [
								"{{base_Url}}filter"
							],
							"path": [
								"v1",
								"industry"
							]
						}
					},
					"response": []
				},
				{
					"name": "industry- No Data -\"value\": \"\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e0f65da-72fe-4334-8f5c-bf3d397bbad8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has a valid structure\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"    pm.expect(response).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Status object contains expected properties\", function () {\r",
									"    pm.expect(response.status).to.have.property('statusCode');\r",
									"    pm.expect(response.status).to.have.property('requestId');\r",
									"    pm.expect(response.status).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Data is an array\", function () {\r",
									"    pm.expect(response.data).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "46461322-0cdc43ea-2d44-4170-9aeb-5f00432a42bf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": {\r\n        \"value\": \"\"\r\n    },\r\n    \"pagination\": {\r\n        \"page_size\": 50,\r\n        \"page_no\": 1\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_Url}}filter/v1/industry",
							"host": [
								"{{base_Url}}filter"
							],
							"path": [
								"v1",
								"industry"
							]
						}
					},
					"response": []
				},
				{
					"name": "industry- industry name -\"value\": \"art\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e0f65da-72fe-4334-8f5c-bf3d397bbad8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has a valid structure\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"    pm.expect(response).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Status object contains expected properties\", function () {\r",
									"    pm.expect(response.status).to.have.property('statusCode');\r",
									"    pm.expect(response.status).to.have.property('requestId');\r",
									"    pm.expect(response.status).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Data is an array\", function () {\r",
									"    pm.expect(response.data).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "46461322-d4fd07dd-2540-4d16-8e15-cfc6d4a2ec54",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": {\r\n        \"value\": \"art\"\r\n    },\r\n    \"pagination\": {\r\n        \"page_size\": 50,\r\n        \"page_no\": 1\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_Url}}filter/v1/industry",
							"host": [
								"{{base_Url}}filter"
							],
							"path": [
								"v1",
								"industry"
							]
						}
					},
					"response": []
				},
				{
					"name": "industry- Exclude Valid Data -\"value\": \"51\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e0f65da-72fe-4334-8f5c-bf3d397bbad8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has a valid structure\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"    pm.expect(response).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Status object contains expected properties\", function () {\r",
									"    pm.expect(response.status).to.have.property('statusCode');\r",
									"    pm.expect(response.status).to.have.property('requestId');\r",
									"    pm.expect(response.status).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Data is an array\", function () {\r",
									"    pm.expect(response.data).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "46461322-80dc4bf7-6b26-40f9-8e72-3f1349b99618",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "// not working",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_Url}}filter/v1/industry",
							"host": [
								"{{base_Url}}filter"
							],
							"path": [
								"v1",
								"industry"
							]
						}
					},
					"response": []
				},
				{
					"name": "industry- value is missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e0f65da-72fe-4334-8f5c-bf3d397bbad8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has a valid structure\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"    pm.expect(response).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Status object contains expected properties\", function () {\r",
									"    pm.expect(response.status).to.have.property('statusCode');\r",
									"    pm.expect(response.status).to.have.property('requestId');\r",
									"    pm.expect(response.status).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Data is an array\", function () {\r",
									"    pm.expect(response.data).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "46461322-370b6898-aaaf-4c24-b45a-2c0b18d762b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": {\r\n    // value is missing\r\n  },\r\n  \"pagination\": {\r\n    \"page_size\": 50,\r\n    \"page_no\": 1\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_Url}}filter/v1/industry",
							"host": [
								"{{base_Url}}filter"
							],
							"path": [
								"v1",
								"industry"
							]
						}
					},
					"response": []
				},
				{
					"name": "industry - Missing \"data\" object",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e0f65da-72fe-4334-8f5c-bf3d397bbad8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has a valid structure\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"    pm.expect(response).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Status object contains expected properties\", function () {\r",
									"    pm.expect(response.status).to.have.property('statusCode');\r",
									"    pm.expect(response.status).to.have.property('requestId');\r",
									"    pm.expect(response.status).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Data is an array\", function () {\r",
									"    pm.expect(response.data).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "46461322-cb546a4e-77eb-4922-b4cd-a7e7ff8e16e7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"pagination\": {\r\n    \"page_size\": 50,\r\n    \"page_no\": 1\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_Url}}filter/v1/industry",
							"host": [
								"{{base_Url}}filter"
							],
							"path": [
								"v1",
								"industry"
							]
						}
					},
					"response": []
				},
				{
					"name": "industry - Invalid \"value\" input",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e0f65da-72fe-4334-8f5c-bf3d397bbad8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has a valid structure\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"    pm.expect(response).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Status object contains expected properties\", function () {\r",
									"    pm.expect(response.status).to.have.property('statusCode');\r",
									"    pm.expect(response.status).to.have.property('requestId');\r",
									"    pm.expect(response.status).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Data is an array\", function () {\r",
									"    pm.expect(response.data).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "46461322-f26e9615-a6f0-44c1-a048-b04a10c535c9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": {\r\n    \"value\": \"a\".repeat(1000)\r\n  },\r\n  \"pagination\": {\r\n    \"page_size\": 50,\r\n    \"page_no\": 1\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_Url}}filter/v1/industry",
							"host": [
								"{{base_Url}}filter"
							],
							"path": [
								"v1",
								"industry"
							]
						}
					},
					"response": []
				}
			],
			"id": "46461322-240e1492-ce40-4d6c-845c-dac96ba47e33"
		},
		{
			"name": "Parent Company Filter",
			"item": [
				{
					"name": "Get All Parent Company",
					"item": [
						{
							"name": "Get All Parent Company- valid data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab5e14cb-a5b0-4849-bcd2-cb19b539d361",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has a valid structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"status\");\r",
											"    pm.expect(jsonData.status.statusCode).to.equal(200);\r",
											"    pm.expect(jsonData).to.have.property(\"data\");\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Each item contains required fields\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    jsonData.data.forEach(item => {\r",
											"        pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"        pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"        pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"        pm.expect(item).to.have.property(\"account_details\");\r",
											"        pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-58eeb79d-fddf-4a82-9029-49471aa235cb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"value\": \"\"\r\n    },\r\n    \"pagination\": {\r\n        \"page_size\": 10,\r\n        \"page_no\": 1\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/generic/company",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"generic",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Parent Company- Invalid data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2232467-caad-4691-b5d2-c114dd007bbe",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has a valid structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"status\");\r",
											"    pm.expect(jsonData.status.statusCode).to.equal(200);\r",
											"    pm.expect(jsonData).to.have.property(\"data\");\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Each item contains required fields\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    jsonData.data.forEach(item => {\r",
											"        pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"        pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"        pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"        pm.expect(item).to.have.property(\"account_details\");\r",
											"        pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-4742e721-825f-4efd-937c-ccdb510166ba",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"value\": \"a.repeat(1000)\"\r\n    },\r\n    \"pagination\": {\r\n        \"page_size\": 50,\r\n        \"page_no\": 1\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/generic/company",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"generic",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Parent Company- value is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "267477fe-c232-42b3-9efa-1decd758aef6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has a valid structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"status\");\r",
											"    pm.expect(jsonData.status.statusCode).to.equal(200);\r",
											"    pm.expect(jsonData).to.have.property(\"data\");\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Each item contains required fields\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    jsonData.data.forEach(item => {\r",
											"        pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"        pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"        pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"        pm.expect(item).to.have.property(\"account_details\");\r",
											"        pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-6a5dd9d3-28c4-457a-947f-bae432f9efb6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \r\n    },\r\n    \"pagination\": {\r\n        \"page_size\": 50,\r\n        \"page_no\": 1\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/generic/company",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"generic",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Parent Company- Missing \"data\" object",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ddc0b2d0-77f4-45d2-ae72-36aea3192046",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has a valid structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"status\");\r",
											"    pm.expect(jsonData.status.statusCode).to.equal(200);\r",
											"    pm.expect(jsonData).to.have.property(\"data\");\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Each item contains required fields\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    jsonData.data.forEach(item => {\r",
											"        pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"        pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"        pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"        pm.expect(item).to.have.property(\"account_details\");\r",
											"        pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-7cd3f8c6-b0d3-4530-97b5-9d4782739264",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"pagination\": {\r\n        \"page_size\": 50,\r\n        \"page_no\": 1\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/generic/company",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"generic",
										"company"
									]
								}
							},
							"response": []
						}
					],
					"id": "46461322-c7ca93b6-bc25-48d1-a212-308539f688f6"
				},
				{
					"name": "Advanced Search(Parent Company Filter)",
					"item": [
						{
							"name": "Advanced Search(Parent Company Filter) Valid data INCLUDE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-d2eda40b-f5ae-45e2-9f94-ff7eaf124df1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                    \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                    \"rc_comp_name_drv\": \"Google\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                    \"name\": \"Google\",\r\n                    \"type\": \"INCLUDE\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_ACCOUNT\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search(Parent Company Filter) Valid data Multi",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-5e3111c4-1312-4cb9-832d-34307391f6b3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                    \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                    \"rc_comp_name_drv\": \"Google\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                    \"name\": \"Google\",\r\n                    \"type\": \"INCLUDE\"\r\n                },\r\n                {\r\n                    \"pc_comp_guid\": \"53A15A01E32C8428\",\r\n                    \"rc_comp_name_drv\": \"Amazon\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C560BAQHTvZwCx4p2Qg/company-logo_200_200/company-logo_200_200/0/1630640869849/amazon_logo?e=2147483647&v=beta&t=a5B7I1UaO0ruEdmvO_Ojbq4HW61CWsJk535_kW66RfU\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"amazon.com\",\r\n                    \"name\": \"Amazon\",\r\n                    \"type\": \"INCLUDE\"\r\n                },\r\n                {\r\n                    \"pc_comp_guid\": \"C5C7C0D7F97E3DD1\",\r\n                    \"rc_comp_name_drv\": \"Microsoft\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/D560BAQH32RJQCl3dDQ/company-logo_200_200/B56ZYQ0mrGGoAM-/0/1744038948046/microsoft_logo?e=2147483647&v=beta&t=ts9MGrTk7Lz3R1bmAfzCL8euuuuPWPCoXfdiLA2_IzM\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"microsoft.com\",\r\n                    \"name\": \"Microsoft\",\r\n                    \"type\": \"INCLUDE\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_LEAD\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search(Parent Company Filter) Valid data EXCLUDE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a09ee5d5-bf00-4cd1-a0e4-2ca4ac9923ae",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-521d1144-a8f4-4301-b49d-a4a7aa888905",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                    \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                    \"rc_comp_name_drv\": \"Google\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                    \"name\": \"Google\",\r\n                    \"type\": \"EXCLUDE\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_ACCOUNT\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search(Parent Company Filter) Invalid data (GUID)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a09ee5d5-bf00-4cd1-a0e4-2ca4ac9923ae",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-0e07c3e2-f174-4a0a-b5f8-b7ed8d9e5b4a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                    \"pc_comp_guid\": \"@!!##@\",\r\n                    \"rc_comp_name_drv\": \"Google\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                    \"name\": \"Google\",\r\n                    \"type\": \"INCLUDE\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_ACCOUNT\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 50\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search(Parent Company Filter) Missing Filter Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a09ee5d5-bf00-4cd1-a0e4-2ca4ac9923ae",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-56b829ab-abe1-47cf-acb3-ecede0dfc920",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                  \r\n                    \r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_ACCOUNT\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search(Parent Company Filter) Invalid type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a09ee5d5-bf00-4cd1-a0e4-2ca4ac9923ae",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-79ab5ee2-16ec-4972-88e3-4a86a28efb80",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                    \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                    \"rc_comp_name_drv\": \"Google\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                    \"name\": \"Google\",\r\n                    \"type\": \"EXCLUDE\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_ACNT\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search Lead(Parent Company Filter) Valid data INCLUDE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-3bc41721-3560-4f02-9f6e-fa5e76b2efad",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                    \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                    \"rc_comp_name_drv\": \"Google\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                    \"name\": \"Google\",\r\n                    \"type\": \"INCLUDE\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_LEAD\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search Lead(Parent Company Filter) Valid data EXCLUDE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a09ee5d5-bf00-4cd1-a0e4-2ca4ac9923ae",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-06b5b0bd-631a-4e15-b3d9-3dd45e3a56d2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                    \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                    \"rc_comp_name_drv\": \"Google\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                    \"name\": \"Google\",\r\n                    \"type\": \"EXCLUDE\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_LEAD\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search Lead(Parent Company Filter) Invalid data (GUID)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a09ee5d5-bf00-4cd1-a0e4-2ca4ac9923ae",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-93266ef0-0f4b-4cb6-9dca-1743bbfec6e3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                    \"pc_comp_guid\": \"47656*\",\r\n                    \"rc_comp_name_drv\": \"Google\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \" google.com\",\r\n                    \"name\": \"Google\",\r\n                    \"type\": \"INCLUDE\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_LEAD\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search Lead(Parent Company Filter) Missing Filter Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a09ee5d5-bf00-4cd1-a0e4-2ca4ac9923ae",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-76177113-33b7-4db7-a9cc-bf923eb455eb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                  \r\n                    \r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_LEAD\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": []
						}
					],
					"id": "46461322-fed017ab-731d-4cb6-af59-9e1c4b0db3e0"
				},
				{
					"name": "Advanced Search Count(Parent Company Filter)",
					"item": [
						{
							"name": "Advanced Search Count(Parent Company Filter) - Lead",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property('status');\r",
											"    pm.expect(response).to.have.property('data');\r",
											"});\r",
											"\r",
											"// Test for status property structure\r",
											"pm.test(\"Status property has message, requestId, and statusCode\", function () {\r",
											"    pm.expect(response.status).to.have.property('message');\r",
											"    pm.expect(response.status).to.have.property('requestId');\r",
											"    pm.expect(response.status).to.have.property('statusCode');\r",
											"});\r",
											"\r",
											"// Test for data property structure\r",
											"pm.test(\"Data property has company_count and contact_count\", function () {\r",
											"    pm.expect(response.data).to.have.property('company_count');\r",
											"    pm.expect(response.data).to.have.property('contact_count');\r",
											"});\r",
											"\r",
											"// Test for content-type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-36de6d24-dcb3-4968-b52f-f40055019a84",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                    \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                    \"rc_comp_name_drv\": \"Google\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                    \"name\": \"Google\",\r\n                    \"type\": \"INCLUDE\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_LEAD\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search-count",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search-count"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search Count(Parent Company Filter) - Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property('status');\r",
											"    pm.expect(response).to.have.property('data');\r",
											"});\r",
											"\r",
											"// Test for status property structure\r",
											"pm.test(\"Status property has message, requestId, and statusCode\", function () {\r",
											"    pm.expect(response.status).to.have.property('message');\r",
											"    pm.expect(response.status).to.have.property('requestId');\r",
											"    pm.expect(response.status).to.have.property('statusCode');\r",
											"});\r",
											"\r",
											"// Test for data property structure\r",
											"pm.test(\"Data property has company_count and contact_count\", function () {\r",
											"    pm.expect(response.data).to.have.property('company_count');\r",
											"    pm.expect(response.data).to.have.property('contact_count');\r",
											"});\r",
											"\r",
											"// Test for content-type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-63d400cc-b829-4b12-a6aa-8fdbd0201339",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                    \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                    \"rc_comp_name_drv\": \"Google\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                    \"name\": \"Google\",\r\n                    \"type\": \"INCLUDE\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_ACCOUNT\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search-count",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search-count"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search Count(Parent Company Filter) - Lead Multi",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-0e424bbb-1094-476e-a667-bdc1e0e73d38",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                    \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                    \"rc_comp_name_drv\": \"Google\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                    \"name\": \"Google\",\r\n                    \"type\": \"INCLUDE\"\r\n                },\r\n                {\r\n                    \"pc_comp_guid\": \"53A15A01E32C8428\",\r\n                    \"rc_comp_name_drv\": \"Amazon\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C560BAQHTvZwCx4p2Qg/company-logo_200_200/company-logo_200_200/0/1630640869849/amazon_logo?e=2147483647&v=beta&t=a5B7I1UaO0ruEdmvO_Ojbq4HW61CWsJk535_kW66RfU\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"amazon.com\",\r\n                    \"name\": \"Amazon\",\r\n                    \"type\": \"INCLUDE\"\r\n                },\r\n                {\r\n                    \"pc_comp_guid\": \"C5C7C0D7F97E3DD1\",\r\n                    \"rc_comp_name_drv\": \"Microsoft\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/D560BAQH32RJQCl3dDQ/company-logo_200_200/B56ZYQ0mrGGoAM-/0/1744038948046/microsoft_logo?e=2147483647&v=beta&t=ts9MGrTk7Lz3R1bmAfzCL8euuuuPWPCoXfdiLA2_IzM\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"microsoft.com\",\r\n                    \"name\": \"Microsoft\",\r\n                    \"type\": \"INCLUDE\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_LEAD\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search-count",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search-count"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search Count(Parent Company Filter) - Account Multi",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-225bd31c-7830-4a0b-af5e-e2d34a2c1430",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                    \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                    \"rc_comp_name_drv\": \"Google\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                    \"name\": \"Google\",\r\n                    \"type\": \"INCLUDE\"\r\n                },\r\n                {\r\n                    \"pc_comp_guid\": \"53A15A01E32C8428\",\r\n                    \"rc_comp_name_drv\": \"Amazon\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C560BAQHTvZwCx4p2Qg/company-logo_200_200/company-logo_200_200/0/1630640869849/amazon_logo?e=2147483647&v=beta&t=a5B7I1UaO0ruEdmvO_Ojbq4HW61CWsJk535_kW66RfU\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"amazon.com\",\r\n                    \"name\": \"Amazon\",\r\n                    \"type\": \"INCLUDE\"\r\n                },\r\n                {\r\n                    \"pc_comp_guid\": \"C5C7C0D7F97E3DD1\",\r\n                    \"rc_comp_name_drv\": \"Microsoft\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/D560BAQH32RJQCl3dDQ/company-logo_200_200/B56ZYQ0mrGGoAM-/0/1744038948046/microsoft_logo?e=2147483647&v=beta&t=ts9MGrTk7Lz3R1bmAfzCL8euuuuPWPCoXfdiLA2_IzM\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"microsoft.com\",\r\n                    \"name\": \"Microsoft\",\r\n                    \"type\": \"INCLUDE\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_ACCOUNT\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search-count",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search-count"
									]
								}
							},
							"response": []
						}
					],
					"id": "46461322-caa6a379-bb41-4912-a569-2376f7c03c87"
				},
				{
					"name": "Saved Search Account(Parent Company Filter)",
					"item": [
						{
							"name": "Saved Search Account(Parent Company Filter)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"// Validate status object structure\r",
											"pm.test(\"Status object has correct properties\", function () {\r",
											"    const status = response.status;\r",
											"    pm.expect(status).to.have.property(\"statusCode\");\r",
											"    pm.expect(status).to.have.property(\"requestId\");\r",
											"    pm.expect(status).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate data object structure\r",
											"pm.test(\"Data object has searchId property\", function () {\r",
											"    const data = response.data;\r",
											"    pm.expect(data).to.have.property(\"searchId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-06e0a7f7-d1ae-4ab4-b074-473d8d1ce504",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"name\": \"sa1s\",\r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"parentCompany\": [\r\n                    {\r\n                        \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                        \"rc_comp_name_drv\": \"Google\",\r\n                        \"account_details\": {\r\n                            \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                        },\r\n                        \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                        \"name\": \"Google\",\r\n                        \"type\": \"INCLUDE\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/company-filter/v2/search-account",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"company-filter",
										"v2",
										"search-account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Account(Parent Company Filter) Missing name field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"// Validate status object structure\r",
											"pm.test(\"Status object has correct properties\", function () {\r",
											"    const status = response.status;\r",
											"    pm.expect(status).to.have.property(\"statusCode\");\r",
											"    pm.expect(status).to.have.property(\"requestId\");\r",
											"    pm.expect(status).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate data object structure\r",
											"pm.test(\"Data object has searchId property\", function () {\r",
											"    const data = response.data;\r",
											"    pm.expect(data).to.have.property(\"searchId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-bd2f6d54-f2ee-475d-84a8-1c55800f9d32",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"filterJson\": {\r\n      \"company_info\": {\r\n        \"parentCompany\": [\r\n          {\r\n            \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n            \"rc_comp_name_drv\": \"Google\",\r\n            \"account_details\": {\r\n              \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n            },\r\n            \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n            \"name\": \"Google\",\r\n            \"type\": \"INCLUDE\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/company-filter/v2/search-account",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"company-filter",
										"v2",
										"search-account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Account(Parent Company Filter) Missing Filter Json field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"// Validate status object structure\r",
											"pm.test(\"Status object has correct properties\", function () {\r",
											"    const status = response.status;\r",
											"    pm.expect(status).to.have.property(\"statusCode\");\r",
											"    pm.expect(status).to.have.property(\"requestId\");\r",
											"    pm.expect(status).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate data object structure\r",
											"pm.test(\"Data object has searchId property\", function () {\r",
											"    const data = response.data;\r",
											"    pm.expect(data).to.have.property(\"searchId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-282906f6-fc3f-4925-a2d8-5ea887210485",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"name\": \"sas\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/company-filter/v2/search-account",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"company-filter",
										"v2",
										"search-account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Account(Parent Company Filter)- Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"// Validate status object structure\r",
											"pm.test(\"Status object has correct properties\", function () {\r",
											"    const status = response.status;\r",
											"    pm.expect(status).to.have.property(\"statusCode\");\r",
											"    pm.expect(status).to.have.property(\"requestId\");\r",
											"    pm.expect(status).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate data object structure\r",
											"pm.test(\"Data object has searchId property\", function () {\r",
											"    const data = response.data;\r",
											"    pm.expect(data).to.have.property(\"searchId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-1a4f8460-2006-4ffd-8876-af0418a861c1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"id\": 93,\r\n        \"name\": \"sas\",\r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"parentCompany\": [\r\n                    {\r\n                        \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                        \"rc_comp_name_drv\": \"Google\",\r\n                        \"account_details\": {\r\n                            \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                        },\r\n                        \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                        \"name\": \"Google\",\r\n                        \"type\": \"INCLUDE\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/company-filter/v2/search-account",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"company-filter",
										"v2",
										"search-account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Account(Parent Company Filter)- Update id missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"// Validate status object structure\r",
											"pm.test(\"Status object has correct properties\", function () {\r",
											"    const status = response.status;\r",
											"    pm.expect(status).to.have.property(\"statusCode\");\r",
											"    pm.expect(status).to.have.property(\"requestId\");\r",
											"    pm.expect(status).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate data object structure\r",
											"pm.test(\"Data object has searchId property\", function () {\r",
											"    const data = response.data;\r",
											"    pm.expect(data).to.have.property(\"searchId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-7b25696a-aef4-4f49-b941-1b9d763ead61",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"name\": \"sas\",\r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"parentCompany\": [\r\n                    {\r\n                        \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                        \"rc_comp_name_drv\": \"Google\",\r\n                        \"account_details\": {\r\n                            \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                        },\r\n                        \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                        \"name\": \"Google\",\r\n                        \"type\": \"INCLUDE\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/company-filter/v2/search-account",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"company-filter",
										"v2",
										"search-account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Account(Parent Company Filter)- Update Json missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"// Validate status object structure\r",
											"pm.test(\"Status object has correct properties\", function () {\r",
											"    const status = response.status;\r",
											"    pm.expect(status).to.have.property(\"statusCode\");\r",
											"    pm.expect(status).to.have.property(\"requestId\");\r",
											"    pm.expect(status).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate data object structure\r",
											"pm.test(\"Data object has searchId property\", function () {\r",
											"    const data = response.data;\r",
											"    pm.expect(data).to.have.property(\"searchId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-80591cdd-7e3c-436b-9825-3528f3096866",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"id\": 93,\r\n        \"name\": \"sas\",\r\n        \"filterJson\": {}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/company-filter/v2/search-account",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"company-filter",
										"v2",
										"search-account"
									]
								}
							},
							"response": []
						}
					],
					"id": "46461322-69da146b-4322-473f-886f-29fee587224c"
				},
				{
					"name": "Saved Search Lead(Parent Company Filter) Copy",
					"item": [
						{
							"name": "Saved Search Lead(Parent Company Filter)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"// Validate status object structure\r",
											"pm.test(\"Status object has correct properties\", function () {\r",
											"    const status = response.status;\r",
											"    pm.expect(status).to.have.property(\"statusCode\");\r",
											"    pm.expect(status).to.have.property(\"requestId\");\r",
											"    pm.expect(status).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate data object structure\r",
											"pm.test(\"Data object has searchId property\", function () {\r",
											"    const data = response.data;\r",
											"    pm.expect(data).to.have.property(\"searchId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-60810f81-1c67-45f7-af0c-5c90089efb3c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"name\": \"sas\",\r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"parentCompany\": [\r\n                    {\r\n                        \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                        \"rc_comp_name_drv\": \"Google\",\r\n                        \"account_details\": {\r\n                            \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                        },\r\n                        \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                        \"name\": \"Google\",\r\n                        \"type\": \"INCLUDE\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/contact-filter/v2/search-lead",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"contact-filter",
										"v2",
										"search-lead"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Lead (Parent Company Filter) Missing name field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"// Validate status object structure\r",
											"pm.test(\"Status object has correct properties\", function () {\r",
											"    const status = response.status;\r",
											"    pm.expect(status).to.have.property(\"statusCode\");\r",
											"    pm.expect(status).to.have.property(\"requestId\");\r",
											"    pm.expect(status).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate data object structure\r",
											"pm.test(\"Data object has searchId property\", function () {\r",
											"    const data = response.data;\r",
											"    pm.expect(data).to.have.property(\"searchId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-82b3b3d4-f022-46af-b58e-c773af872f22",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"filterJson\": {\r\n      \"company_info\": {\r\n        \"parentCompany\": [\r\n          {\r\n            \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n            \"rc_comp_name_drv\": \"Google\",\r\n            \"account_details\": {\r\n              \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n            },\r\n            \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n            \"name\": \"Google\",\r\n            \"type\": \"INCLUDE\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/contact-filter/v2/search-lead",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"contact-filter",
										"v2",
										"search-lead"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Lead(Parent Company Filter) Missing Filter Json field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"// Validate status object structure\r",
											"pm.test(\"Status object has correct properties\", function () {\r",
											"    const status = response.status;\r",
											"    pm.expect(status).to.have.property(\"statusCode\");\r",
											"    pm.expect(status).to.have.property(\"requestId\");\r",
											"    pm.expect(status).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate data object structure\r",
											"pm.test(\"Data object has searchId property\", function () {\r",
											"    const data = response.data;\r",
											"    pm.expect(data).to.have.property(\"searchId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-fa905b49-7994-4fc1-9545-e95aa0ba3080",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"name\": \"sas\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/contact-filter/v2/search-lead",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"contact-filter",
										"v2",
										"search-lead"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Lead (Parent Company Filter)- Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"// Validate status object structure\r",
											"pm.test(\"Status object has correct properties\", function () {\r",
											"    const status = response.status;\r",
											"    pm.expect(status).to.have.property(\"statusCode\");\r",
											"    pm.expect(status).to.have.property(\"requestId\");\r",
											"    pm.expect(status).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate data object structure\r",
											"pm.test(\"Data object has searchId property\", function () {\r",
											"    const data = response.data;\r",
											"    pm.expect(data).to.have.property(\"searchId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-6256e670-86fd-4621-bf3c-08f9bdbf9966",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"id\": 115,\r\n        \"name\": \"sas\",\r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"parentCompany\": [\r\n                    {\r\n                        \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                        \"rc_comp_name_drv\": \"Google\",\r\n                        \"account_details\": {\r\n                            \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                        },\r\n                        \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                        \"name\": \"Google\",\r\n                        \"type\": \"INCLUDE\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/contact-filter/v2/search-lead",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"contact-filter",
										"v2",
										"search-lead"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Lead(Parent Company Filter)- Update id missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"// Validate status object structure\r",
											"pm.test(\"Status object has correct properties\", function () {\r",
											"    const status = response.status;\r",
											"    pm.expect(status).to.have.property(\"statusCode\");\r",
											"    pm.expect(status).to.have.property(\"requestId\");\r",
											"    pm.expect(status).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate data object structure\r",
											"pm.test(\"Data object has searchId property\", function () {\r",
											"    const data = response.data;\r",
											"    pm.expect(data).to.have.property(\"searchId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-afb833b2-1860-4317-a47b-d869688b35b3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"name\": \"sas\",\r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"parentCompany\": [\r\n                    {\r\n                        \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                        \"rc_comp_name_drv\": \"Google\",\r\n                        \"account_details\": {\r\n                            \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                        },\r\n                        \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                        \"name\": \"Google\",\r\n                        \"type\": \"INCLUDE\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/contact-filter/v2/search-lead",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"contact-filter",
										"v2",
										"search-lead"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Lead (Parent Company Filter)- Update Json missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"// Validate status object structure\r",
											"pm.test(\"Status object has correct properties\", function () {\r",
											"    const status = response.status;\r",
											"    pm.expect(status).to.have.property(\"statusCode\");\r",
											"    pm.expect(status).to.have.property(\"requestId\");\r",
											"    pm.expect(status).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate data object structure\r",
											"pm.test(\"Data object has searchId property\", function () {\r",
											"    const data = response.data;\r",
											"    pm.expect(data).to.have.property(\"searchId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-39c70eb8-95e2-4492-9745-8efce278c080",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"id\": 115,\r\n        \"name\": \"sas\",\r\n        \"filterJson\": {}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/contact-filter/v2/search-lead",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"contact-filter",
										"v2",
										"search-lead"
									]
								}
							},
							"response": []
						}
					],
					"id": "46461322-4bf1bc7a-75dc-405a-bb9a-5249f792fbe9"
				}
			],
			"id": "46461322-44e475c9-b597-4ffb-9d3b-8f259c1d33e4"
		},
		{
			"name": "Global Revenue Filter",
			"item": [
				{
					"name": "Advanced Search (Global Revenue Filter)",
					"item": [
						{
							"name": "Advanced Search (Global Revenue Filter) - Valid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c408aaa-32a8-40a7-a2ee-c8e7670f1eca",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"const response = pm.response.json();\r",
											"\r",
											"// Validate the response structure\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property('status');\r",
											"    pm.expect(response).to.have.property('data');\r",
											"});\r",
											"\r",
											"// Validate the status structure\r",
											"pm.test(\"Status structure is valid\", function () {\r",
											"    pm.expect(response.status).to.have.property('message').that.is.a('string');\r",
											"    pm.expect(response.status).to.have.property('requestId').that.is.a('string');\r",
											"    pm.expect(response.status).to.have.property('statusCode').that.equals(200);\r",
											"});\r",
											"\r",
											"// Validate the data array structure\r",
											"pm.test(\"Data is an array and has at least one item\", function () {\r",
											"    pm.expect(response.data).to.be.an('array').that.is.not.empty;\r",
											"    response.data.forEach(item => {\r",
											"        pm.expect(item).to.have.property('pc_con_guid').that.is.a('string');\r",
											"        pm.expect(item).to.have.property('ln_con_full_name').that.is.a('string');\r",
											"        pm.expect(item).to.have.property('rc_work_loc_country').that.is.a('string');\r",
											"        pm.expect(item).to.have.property('ln_con_job_title_en').that.is.a('string');\r",
											"        pm.expect(item).to.have.property('leads_details').that.is.an('object');\r",
											"        pm.expect(item).to.have.property('accounts_filter').that.is.an('object');\r",
											"    });\r",
											"});\r",
											"\r",
											"// Validate leads_details structure\r",
											"response.data.forEach(item => {\r",
											"    pm.test(\"Leads details structure is valid\", function () {\r",
											"        pm.expect(item.leads_details).to.have.property('ln_con_picture_url').that.is.a('string');\r",
											"        pm.expect(item.leads_details).to.have.property('ln_con_pub_profile_url').that.is.a('string');\r",
											"        pm.expect(item.leads_details).to.have.property('pc_con_direct_dial_avbl').that.is.a('number');\r",
											"        pm.expect(item.leads_details).to.have.property('pc_con_email_avbl').that.is.a('number');\r",
											"    });\r",
											"});\r",
											"\r",
											"// Validate accounts_filter structure\r",
											"response.data.forEach(item => {\r",
											"    pm.test(\"Accounts filter structure is valid\", function () {\r",
											"        pm.expect(item.accounts_filter).to.have.property('pc_comp_guid').that.is.a('string');\r",
											"        pm.expect(item.accounts_filter).to.have.property('rc_comp_name_drv').that.is.a('string');\r",
											"        pm.expect(item.accounts_filter).to.have.property('account_details').that.is.an('object');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-93c7c5bf-8802-42a8-9de6-b9e4e698120c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"globalRevenue\": {\r\n                \"size_type\": \"CUSTOM_RANGE\",\r\n                \"custom_range\": [\r\n                    {\r\n                        \"id\": 0,\r\n                        \"name\": \"1M - 2M\",\r\n                        \"min\": 1,\r\n                        \"max\": 2,\r\n                        \"type\": \"INCLUDE\"\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        \"type\": \"ADVANCED_SEARCH_LEAD\",\r\n        \"pagination\": {\r\n            \"page_no\": 1,\r\n            \"page_size\": 50\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": [
								{
									"id": "46461322-718049ea-1431-4b8f-8036-4f853a5ff036",
									"name": "Untitled Response",
									"originalRequest": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{auth_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"globalRevenue\": {\r\n                \"size_type\": \"CUSTOM_RANGE\",\r\n                \"custom_range\": [\r\n                    {\r\n                        \"id\": 0,\r\n                        \"name\": \"1M - 2M\",\r\n                        \"min\": 1,\r\n                        \"max\": 2,\r\n                        \"type\": \"INCLUDE\"\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        \"type\": \"ADVANCED_SEARCH_LEAD\",\r\n        \"pagination\": {\r\n            \"page_no\": 1,\r\n            \"page_size\": 50\r\n        }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{base_Url}}search/v4/advanced-search",
											"host": [
												"{{base_Url}}search"
											],
											"path": [
												"v4",
												"advanced-search"
											]
										}
									},
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"responseTime": null,
									"body": "{\"status\": {\"message\": \"Success\",\"requestId\": \"a229dd9e-3d17-45eb-87dc-f575e26047ef\",\"statusCode\": 200},\"data\": [{\"pc_con_guid\": \"A915882CB913472FCDDDC38B55E8B7A5\",\"ln_con_full_name\": \"Cassandra Martel\",\"rc_work_loc_country\": \"France\",\"ln_con_job_title_en\": \"Auxiliaire de vie/soignant\",\"leads_details\": {\"ln_con_picture_url\": \"https://media.licdn.com/dms/image/v2/D4E03AQGOahCjnQJUiA/profile-displayphoto-shrink_200_200/profile-displayphoto-shrink_200_200/0/1720144710004?e=2147483647&v=beta&t=V8j0lE-shsrphewHCW_UopL5cdpX-vuMJyu-8CxuQKo\",\"ln_con_pub_profile_url\": \"https://www.linkedin.com/in/cassandra-martel-760726317\",\"pc_con_direct_dial_avbl\": 2,\"pc_con_email_avbl\": 2},\"accounts_filter\": {\"pc_comp_guid\": \"8BC73B7084EE4EE0\",\"rc_comp_name_drv\": \"ENFIDESIA\",\"account_details\": {\"ln_comp_logo_url\": \"https://static.licdn.com/aero-v1/sc/h/cs8pjfgyw96g44ln9r7tct85f\",\"ln_comp_pub_profile_url\": \"https://www.linkedin.com/company/enfidesia\"}}}]}"
								}
							]
						},
						{
							"name": "Advanced Search (Global Revenue Filter) - Missing Custom Range",
							"id": "46461322-f010bc05-7515-42ee-89db-bc5c2340594c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\": {\"filterType\": \"Applied Search\",\"company_info\": {\"globalRevenue\": {}}},\"type\": \"ADVANCED_SEARCH_LEAD\",\"pagination\": {\"page_no\": 1,\"page_size\": 50}}"
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": [
								{
									"id": "46461322-9b3ad9b8-c456-4d2c-9b88-05d9804d0113",
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"data\": {\"filterType\": \"Applied Search\",\"company_info\": {\"globalRevenue\": {}}},\"type\": \"ADVANCED_SEARCH_LEAD\",\"pagination\": {\"page_no\": 1,\"page_size\": 50}}"
										},
										"url": {
											"raw": "{{base_Url}}search/v4/advanced-search",
											"host": [
												"{{base_Url}}search"
											],
											"path": [
												"v4",
												"advanced-search"
											]
										}
									},
									"code": 400,
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"responseTime": null,
									"body": "{\"error\": \"Missing custom_range in globalRevenue\"}"
								}
							]
						},
						{
							"name": "Advanced Search (Global Revenue Filter) - Invalid Min/Max Values",
							"id": "46461322-10bd3567-21ea-4c99-a717-de724b63af79",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\": {\"filterType\": \"Applied Search\",\"company_info\": {\"globalRevenue\": {\"size_type\": \"CUSTOM_RANGE\",\"custom_range\": [{\"id\": 0,\"name\": \"1M - 2M\",\"min\": -1,\"max\": -2,\"type\": \"INCLUDE\"}]}},\"type\": \"ADVANCED_SEARCH_LEAD\",\"pagination\": {\"page_no\": 1,\"page_size\": 50}}}"
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": [
								{
									"id": "46461322-35d4a2dc-a72c-4cfa-ad8c-b61a264d2c3a",
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"data\": {\"filterType\": \"Applied Search\",\"company_info\": {\"globalRevenue\": {\"size_type\": \"CUSTOM_RANGE\",\"custom_range\": [{\"id\": 0,\"name\": \"1M - 2M\",\"min\": -1,\"max\": -2,\"type\": \"INCLUDE\"}]}},\"type\": \"ADVANCED_SEARCH_LEAD\",\"pagination\": {\"page_no\": 1,\"page_size\": 50}}}"
										},
										"url": {
											"raw": "{{base_Url}}search/v4/advanced-search",
											"host": [
												"{{base_Url}}search"
											],
											"path": [
												"v4",
												"advanced-search"
											]
										}
									},
									"code": 400,
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"responseTime": null,
									"body": "{\"error\": \"Invalid min or max values\"}"
								}
							]
						}
					],
					"id": "46461322-36991c75-71dd-4529-9daa-755445505e9a"
				},
				{
					"name": "Advanced Search Count(Global Revenue Filter)",
					"item": [
						{
							"name": "Advanced Search Count(Global Revenue Filter) - Lead",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-9f98d03f-bc61-48fd-bd5e-9c015ef3d625",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"globalRevenue\": {\r\n                \"size_type\": \"CUSTOM_RANGE\",\r\n                \"custom_range\": [\r\n                    {\r\n                        \"id\": 0,\r\n                        \"name\": \"1M - 2M\",\r\n                        \"min\": 1,\r\n                        \"max\": 2,\r\n                        \"type\": \"INCLUDE\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_LEAD\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search-count",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search-count"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search Count(Global Revenue Filter) - Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-1023a0da-2fd2-4f16-b60c-1e8349fc8d41",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"globalRevenue\": {\r\n                \"size_type\": \"CUSTOM_RANGE\",\r\n                \"custom_range\": [\r\n                    {\r\n                        \"id\": 0,\r\n                        \"name\": \"1M - 2M\",\r\n                        \"min\": 1,\r\n                        \"max\": 2,\r\n                        \"type\": \"INCLUDE\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_ACCOUNT\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search-count",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search-count"
									]
								}
							},
							"response": []
						}
					],
					"id": "46461322-4903b7f5-94b7-44fd-9886-3f582237483c"
				},
				{
					"name": "Save Search Lead(Global Revenue Filter)",
					"item": [
						{
							"name": "Saved Search Lead(Global Revenue Filter)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-90f96438-2d73-41bf-936a-49a9df2b878f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"name\": \"adsdsdsa\",\r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"globalRevenue\": {\r\n                    \"size_type\": \"CUSTOM_RANGE\",\r\n                    \"custom_range\": [\r\n                        {\r\n                            \"id\": 0,\r\n                            \"name\": \"1M - 2M\",\r\n                            \"min\": 1,\r\n                            \"max\": 2,\r\n                            \"type\": \"INCLUDE\"\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/contact-filter/v2/search-lead",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"contact-filter",
										"v2",
										"search-lead"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Lead (Global Revenue Filter) Missing name field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-63d4adcf-80d2-4ebe-aa8a-58b930d4c464",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n       \r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"globalRevenue\": {\r\n                    \"size_type\": \"CUSTOM_RANGE\",\r\n                    \"custom_range\": [\r\n                        {\r\n                            \"id\": 0,\r\n                            \"name\": \"1M - 2M\",\r\n                            \"min\": 1,\r\n                            \"max\": 2,\r\n                            \"type\": \"INCLUDE\"\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/contact-filter/v2/search-lead",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"contact-filter",
										"v2",
										"search-lead"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Lead(Global Revenue Filter) Missing Filter Json field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-49052df5-1393-464f-800f-edc7c4c4f4e8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"name\": \"adsdsdsa\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/contact-filter/v2/search-lead",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"contact-filter",
										"v2",
										"search-lead"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Lead ( Global Revenue Filter)- Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-fe443a18-703d-41ae-a558-31f92021e9a0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"id\": 116,\r\n        \"name\": \"adsdsdsa\",\r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"globalRevenue\": {\r\n                    \"size_type\": \"CUSTOM_RANGE\",\r\n                    \"custom_range\": [\r\n                        {\r\n                            \"id\": 0,\r\n                            \"name\": \"1M - 2M\",\r\n                            \"min\": 1,\r\n                            \"max\": 2,\r\n                            \"type\": \"INCLUDE\"\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/contact-filter/v2/search-lead",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"contact-filter",
										"v2",
										"search-lead"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Lead (Global Revenue Filter)- Update id missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-fb26ea42-a689-4109-a52f-4d555a4846cf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"name\": \"adsdsdsa\",\r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"globalRevenue\": {\r\n                    \"size_type\": \"CUSTOM_RANGE\",\r\n                    \"custom_range\": [\r\n                        {\r\n                            \"id\": 0,\r\n                            \"name\": \"1M - 2M\",\r\n                            \"min\": 1,\r\n                            \"max\": 2,\r\n                            \"type\": \"INCLUDE\"\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/contact-filter/v2/search-lead",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"contact-filter",
										"v2",
										"search-lead"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Lead (Global Revenue Filter)- Update Json missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-2a740d14-21f3-4248-85e0-45a104cdb26c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"id\": 116,\r\n        \"name\": \"adsdsdsa\",\r\n        \"filterJson\": {}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/contact-filter/v2/search-lead",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"contact-filter",
										"v2",
										"search-lead"
									]
								}
							},
							"response": []
						}
					],
					"id": "46461322-b250f2fc-c21d-493c-92c5-c486f507d2d1"
				},
				{
					"name": "Save Search Account(Global Revenue Filter)",
					"item": [
						{
							"name": "Saved Search Account(Global Revenue Filter)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-80d2f56f-f0c2-4a10-97ed-41d7fe00dbb1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"name\": \"adsdsdsa\",\r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"globalRevenue\": {\r\n                    \"size_type\": \"CUSTOM_RANGE\",\r\n                    \"custom_range\": [\r\n                        {\r\n                            \"id\": 0,\r\n                            \"name\": \"1M - 2M\",\r\n                            \"min\": 1,\r\n                            \"max\": 2,\r\n                            \"type\": \"INCLUDE\"\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/company-filter/v2/search-account",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"company-filter",
										"v2",
										"search-account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Account (Global Revenue Filter) Missing name field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-f806fcd5-aa3e-43b6-8559-0fc83bf1921f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n       \r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"globalRevenue\": {\r\n                    \"size_type\": \"CUSTOM_RANGE\",\r\n                    \"custom_range\": [\r\n                        {\r\n                            \"id\": 0,\r\n                            \"name\": \"1M - 2M\",\r\n                            \"min\": 1,\r\n                            \"max\": 2,\r\n                            \"type\": \"INCLUDE\"\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/company-filter/v2/search-account",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"company-filter",
										"v2",
										"search-account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Account(Global Revenue Filter) Missing Filter Json field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-691323ea-e129-4334-bd8b-6238f2d10363",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"name\": \"adsdsdsa\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/company-filter/v2/search-account",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"company-filter",
										"v2",
										"search-account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Account ( Global Revenue Filter)- Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-306f4c03-1845-455e-a91b-7d691c6c6613",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"id\": 112,\r\n        \"name\": \"adsdsdsa\",\r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"globalRevenue\": {\r\n                    \"size_type\": \"CUSTOM_RANGE\",\r\n                    \"custom_range\": [\r\n                        {\r\n                            \"id\": 0,\r\n                            \"name\": \"1M - 2M\",\r\n                            \"min\": 1,\r\n                            \"max\": 2,\r\n                            \"type\": \"INCLUDE\"\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/company-filter/v2/search-account",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"company-filter",
										"v2",
										"search-account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Account (Global Revenue Filter)- Update id missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-52433f76-6d3b-4f35-9b94-0f886c481bba",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"name\": \"adsdsdsa\",\r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"globalRevenue\": {\r\n                    \"size_type\": \"CUSTOM_RANGE\",\r\n                    \"custom_range\": [\r\n                        {\r\n                            \"id\": 0,\r\n                            \"name\": \"1M - 2M\",\r\n                            \"min\": 1,\r\n                            \"max\": 2,\r\n                            \"type\": \"INCLUDE\"\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/company-filter/v2/search-account",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"company-filter",
										"v2",
										"search-account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Account (Global Revenue Filter)- Update Json missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "46461322-b5249f64-f222-4958-80ee-9d5030893981",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"id\": 112,\r\n        \"name\": \"adsdsdsa\",\r\n        \"filterJson\": {}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/company-filter/v2/search-account",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"company-filter",
										"v2",
										"search-account"
									]
								}
							},
							"response": []
						}
					],
					"id": "46461322-7cd479e9-445e-4c07-b36b-3207b81bd12e"
				}
			],
			"id": "46461322-0c4fe318-6d38-4ca1-9b59-0517e81e4af2"
		},
		{
			"name": "New Folder",
			"item": [],
			"id": "46461322-c41f73fb-38f2-4f53-9020-f1b904225f1e"
		}
	]
}